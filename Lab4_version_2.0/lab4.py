import numpy as npclass Simple:    def __init__(self):        super().__init__(self)        self.simplex_table = []        self.basis = []        self.m = None        self.n = None    def init_simple_table_and_basis(self, table):        self.m = table.shape[0]        self.n = table.shape[1]        for i in range(self.m):            for j in range(self.n):                if j < self.n:                    self.simplex_table[i][j] = table[i][j]                else:                    self.simplex_table[i][j] = 0            if (self.n + i) < self.n:                self.simplex_table[i][self.n + 1] = 1                self.basis.append(self.n + 1)        self.n = self.simplex_table.shape[1]    def calc(self, result):        mainCol, mainRow = 0, 0        def isItEnd():            flag = True            for i in range(1, self.n):                if self.simplex_table[self.m - 1][j] < 0:                    flag = False                    break            return flag        def findMainCol():            _mainCol = 1            for j in range(2, self.n):                if self.simplex_table[self.m - 1][j] < self.simplex_table[self.m - 1][_mainCol]:                    _mainCol = j            return _mainCol        def findMainRow(_mainCol):            _mainRow = 0            for i in range(self.m - 1):                if self.simplex_table[i][mainCol] > 0:                    _mainRow = i                    break            for i in range(_mainRow + 1, self.m - 1):                if self.simplex_table[i][_mainRow] > 0 and ((self.simplex_table[i][0] / self.simplex_table[i][mainCol]) < (self.simplex_table[_mainRow][0] / self.simplex_table[_mainRow][mainCol])):                    _mainRow = i            return _mainRow        new_flag = isItEnd()        while new_flag:            mainCol = findMainCol()            mainRow = findMainRow(mainCol)            self.basis[mainRow] = mainCol            new_table = []            for j in range(self.n):                new_table[mainRow][j] = self.simplex_table[mainRow][j] / self.simplex_table[mainRow][mainCol]            for i in range(self.m):                if i == mainRow:                    continue                for j in range(self.n):                    new_table[i][j] = self.simplex_table[i][j] - self.simplex_table[i][mainCol] * new_table[mainRow][j]                self.simplex_table = new_table            result = np.zero(2)            for i in range(len(result)):                k = self.basis.index(i + 1)                if k != -1:                    result[i] = self.simplex_table[k][0]                else:                    result[i] = 0            return self.simplex_table